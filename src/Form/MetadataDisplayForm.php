<?php

namespace Drupal\format_strawberryfield\Form;

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\OpenOffCanvasDialogCommand;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Entity\Element\EntityAutocomplete;
use Drupal\Core\Language\Language;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\strawberryfield\Tools\StrawberryfieldJsonHelper;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Form controller for the MetadataDisplayEntity entity edit forms.
 *
 * @ingroup format_strawberryfield
 */
class MetadataDisplayForm extends ContentEntityForm {

  /**
   * Formatter Plugin Manager.
   *
   * @var \Drupal\Component\Plugin\PluginManagerInterface
   */
  protected $formatterPluginManager;

  /**
   * The Twig environment.
   *
   * @var \Drupal\Core\Template\TwigEnvironment
   */
  protected $twig;

  /**
   * The renderer.
   *
   * @var \Drupal\Core\Render\RendererInterface
   */
  protected $renderer;

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    $instance = parent::create($container);
    $instance->formatterPluginManager = $container->get('plugin.manager.field.formatter');
    $instance->twig = $container->get('twig');
    $instance->renderer = $container->get('renderer');
    return $instance;
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $form = parent::buildForm($form, $form_state);

    $form['langcode'] = [
      '#title' => $this->t('Language'),
      '#type' => 'language_select',
      '#default_value' => $this->entity->getUntranslated()->language()->getId(),
      '#languages' => Language::STATE_ALL,
    ];

    $form['footer']['help'] = [
      '#title' => $this->t('Help? Full list of available Twig replacements and functions in Drupal 8.'),
      '#type' => 'link',
      '#url' => Url::fromUri('https://www.drupal.org/docs/8/theming/twig/functions-in-twig-templates',
        [
          'attributes' =>
          [
            'target' => '_blank',
            'rel' => 'nofollow',
          ],
        ]
      ),
    ];

    // Display a Preview feature.
    $form['preview'] = [
      '#type' => 'details',
      '#title' => $this->t('Preview'),
      '#open' => false,
    ];
    $form['preview']['ado_context_preview'] = [
      '#type' => 'entity_autocomplete',
      '#title' => $this->t('ADO to preview'),
      '#description' => $this->t('The ADO used to preview the data.'),
      '#target_type' => 'node',
      '#selection_handler' => 'default:nodewithstrawberry',
    ];
    $form['preview']['button_preview'] = [
      '#type' => 'button',
      '#op' => 'preview',
      '#value' => $this->t('Show preview'),
      '#ajax' => [
        'callback' => [$this, 'ajaxPreview'],
      ],
      '#states' => [
        'visible' => ['input[name="ado_context_preview"' => ['filled' => true]],
      ],
    ];

    // Enable autosaving in code mirror.
    $form['#attached']['library'][] = 'format_strawberryfield/code_mirror_autosave';

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    try {
      $build = [
        '#type' => 'inline_template',
        '#template' => $form_state->getValue('twig')[0]['value'],
        '#context' => [],
      ];
      $this->renderer->renderPlain($build);
    }
    catch (\Exception $exception) {
      $form_state->setErrorByName('twig', $exception->getMessage());
    }
    //@TODO Change the autogenerated stub.
    return parent::validateForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function save(array $form, FormStateInterface $form_state) {
    $status = parent::save($form, $form_state);

    /** @var \Drupal\format_strawberryfield\MetadataDisplayInterface $entity */
    $entity = $this->entity;
    if ($status == SAVED_UPDATED) {
      $this->messenger()->addMessage($this->t('The Metadata Display %entity has been updated.', ['%entity' => $entity->toLink()->toString()]));
    }
    else {
      $this->messenger()->addMessage($this->t('The Metadata Display %entity has been added.', ['%entity' => $entity->toLink()->toString()]));
    }
    $this->formatterPluginManager->clearCachedDefinitions();
    $this->twig->invalidate();

    return $status;
  }

  /**
   * AJAX callback.
   */
  public static function ajaxPreview($form, FormStateInterface $form_state) {
    $response = new AjaxResponse();

    /** @var \Drupal\format_strawberryfield\MetadataDisplayInterface $entity */
    $entity = $form_state->getFormObject()->getEntity();

    // Attach the library necessary for using the OpenOffCanvasDialogCommand and
    // set the attachments for this Ajax response.
    $form['#attached']['library'][] = 'core/drupal.dialog.off_canvas';
    $form['#attached']['library'][] = 'codemirror_editor/editor';
    $response->setAttachments($form['#attached']);

    $input = $form_state->getUserInput();
    $id = EntityAutocomplete::extractEntityIdFromAutocompleteInput($input['ado_context_preview']);
    /** @var \Drupal\node\NodeInterface $preview_node */
    $preview_node = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->load($id);
    if (empty($preview_node)) {
      return $response;
    }

    $sbf_fields = \Drupal::service('strawberryfield.utility')->bearsStrawberryfield($preview_node);

    // Set initial context.
    $context = [
      'node' => $preview_node,
      'iiif_server' => \Drupal::service('config.factory')->get('format_strawberryfield.iiif_settings')->get('pub_server_url'),
    ];

    // Add the SBF json context.
    // @see MetadataExposeDisplayController::castViaTwig()
    foreach ($sbf_fields as $field_name) {
      /** @var \Drupal\strawberryfield\Field\StrawberryFieldItemList $field */
      $field = $preview_node->get($field_name);
      foreach ($field as $offset => $fielditem) {
        $jsondata = json_decode($fielditem->value, TRUE);
        // Preorder as:media by sequence.
        $ordersubkey = 'sequence';
        foreach (StrawberryfieldJsonHelper::AS_FILE_TYPE as $key) {
          StrawberryfieldJsonHelper::orderSequence($jsondata, $key, $ordersubkey);
        }
        if ($offset === 0) {
          $context['data'] = $jsondata;
        }
        else {
          $context['data'][$offset] = $jsondata;
        }
      }
    }

    $output = [];
    $output['json'] = [
      '#type' => 'details',
      '#title' => t('JSON Data'),
      '#open' => false,
    ];
    $output['json']['data'] = [
      '#type' => 'codemirror',
      '#rows' => 60,
      '#value' => json_encode($context['data'], JSON_PRETTY_PRINT),
      '#codemirror' => [
        'lineNumbers' => FALSE,
        'toolbar' => FALSE,
        'readOnly' => TRUE,
        'mode' => 'application/json',
      ],
    ];

    // Ensure we're using the twig from user's input instead of the entity's
    // default.
    $entity->set('twig', $input['twig'][0]);
    $output['preview'] = [
      '#type' => 'codemirror',
      '#rows' => 60,
      '#value' => $entity->renderNative($context),
      '#codemirror' => [
        'lineNumbers' => FALSE,
        'toolbar' => FALSE,
        'readOnly' => TRUE,
        'mode' => 'text/html',
      ],
    ];

    $response->addCommand(new OpenOffCanvasDialogCommand(t('Preview'), $output, ['width' => '50%']));
    return $response;
  }

}
