<?php
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Config\Entity\ConfigEntityType;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Database\Database;
/**
 * Install Entity and add 'mime type' field to 'metadata display' entities.
 */
function format_strawberryfield_update_8001() {

  $schema = Database::getConnection()->schema();
  // Always start by testing if the entity is already deployed.
  if (!$schema->tableExists('metadatadisplay_entity')) {
    \Drupal::entityTypeManager()->clearCachedDefinitions();
    \Drupal::entityDefinitionUpdateManager()
        ->installEntityType(\Drupal::entityTypeManager()->getDefinition('metadatadisplay_entity'));
  }

  // Add mimetype field definition to \Drupal\format_strawberryfield\Entity\MetadataDisplayEntity
  //@see https://www.drupal.org/node/2554097
  $storage_definition = BaseFieldDefinition::create('list_string')
    ->setLabel(t('Primary mime type this Twig Template entity will generate as output.'))
    ->setDescription(t('When downloading the output, this will define the extension, validation and format. Every Mime type supports also being rendered as HTML'))
    ->setSettings(array(
      'default_value' => 'text/html',
      'max_length' => 64,
      'cardinality' => 1,
      'allowed_values' => [
        'text/html' => 'HTML',
        'application/json' => 'JSON',
        'application/ld+json' => 'JSON-LD',
        'application/xml' => 'XML',
        'text/text' => 'TEXT',
        'text/turtle' => 'RDF/TURTLE',
        'text/csv' => 'CSV',
      ],
    ))
    ->setRequired(TRUE)
    ->setDisplayOptions('view', [
      'region' => 'hidden',
    ])
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->addConstraint('NotBlank');

  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('mimetype', 'metadatadisplay_entity', 'format_strawberryfield', $storage_definition);
}

/**
 * Implements hook_update_N().
 *
 * Installs metadataexpose_entity config entity for exposing twig output via routes.
 *
 * @see 'https://www.drupal.org/node/3034742'
 */
function format_strawberryfield_update_8701() {
  \Drupal::entityDefinitionUpdateManager()->installEntityType(new ConfigEntityType([
    'id' => 'metadataexpose_entity',
    'label' => new TranslatableMarkup('Exposed Metadata using Twig Configuration'),
    'config_prefix' => 'metadataexpose_entity',
    'admin_permission' => 'administer site configuration',
    'entity_keys' => ['id' => 'id',
      'label' => 'label',
      'uuid' => 'uuid',
      'active' => 'active',
    ],
    'config_export' => [
      'id',
      'label',
      'uuid',
      'target_entity_types',
      'source_entityfield_name',
      'processor_entity_id',
      'cache',
      'active'
    ],
  ]));
}

/**
 * Implements hook_update_N().
 *
 * Updates Formatters, Exposed metadata and Views to load metadatadisplay entities via UUID.
 *
 */
function format_strawberryfield_update_8702() {
  $config_factory = \Drupal::configFactory();
  // Find all views configs.
  foreach ($config_factory->listAll('views.view.') as $view_config_name) {
    $needs_saving = FALSE;
    $view = $config_factory->getEditable($view_config_name);
    // Go through each display on each view.
    $displays = $view->get('display');
    foreach ($displays as $display_name => &$display) {
      if (isset($display['display_options']['fields'])) {
        foreach ($display['display_options']['fields'] as &$field) {
          $metadatadisplayentity_id = $field['settings']['metadatadisplayentity_id'] ?? NULL;
          $metadatadisplayentity_id = is_scalar($metadatadisplayentity_id) ? $metadatadisplayentity_id : NULL;
          if ($metadatadisplayentity_id) {
            $metadata_display_entitiy = \Drupal::entityTypeManager()
              ->getStorage('metadatadisplay_entity')
              ->load($metadatadisplayentity_id);
            if ($metadata_display_entitiy) {
              $uuid = $metadata_display_entitiy->uuid();
              $field['settings']['metadatadisplayentity_uuid'] = $uuid;
              unset($field['settings']['metadatadisplayentity_id']);
              $needs_saving = TRUE;
            }
          }
        }
      }
    }
    if ($needs_saving) {
      $view->set('display', $displays);
      $view->save(TRUE);
    }
  }

  // Entity view display configs for nodes.
  foreach ($config_factory->listAll('core.entity_view_display.node.') as $entity_view_display_config) {
    $entity_view = $config_factory->getEditable($entity_view_display_config);
    // We need to load the ones that contain a metadata display id as number
    // $data['content']['fieldname'][type] = strawberry_metadata_formatter
    $data = $entity_view->getRawData();
    $needs_saving = FALSE;
    if (isset($data['third_party_settings']['ds']['fields'])) {
      foreach ($data['third_party_settings']['ds']['fields'] as &$field) {
        $metadatadisplayentity_id = $field['settings']['formatter']['metadatadisplayentity_id'] ?? NULL;
        $metadatadisplayentity_id = is_scalar($metadatadisplayentity_id) ? $metadatadisplayentity_id : NULL;
        if ($metadatadisplayentity_id) {
          $metadata_display_entitiy = \Drupal::entityTypeManager()
            ->getStorage('metadatadisplay_entity')
            ->load($metadatadisplayentity_id);
          if ($metadata_display_entitiy) {
            $uuid = $metadata_display_entitiy->uuid();
            $field['settings']['formatter']['metadatadisplayentity_uuid'] = $uuid;
            unset($field['settings']['formatter']['metadatadisplayentity_id']);
            $needs_saving = TRUE;
          }
        }
        else {
          $metadatadisplayentity_source = $field['settings']['formatter']['metadatadisplayentity_source'] ?? NULL;
          $metadatadisplayentity_source = is_scalar($metadatadisplayentity_source) ? $metadatadisplayentity_source : NULL;
          if ($metadatadisplayentity_source) {
            $metadata_display_entitiy = \Drupal::entityTypeManager()
              ->getStorage('metadatadisplay_entity')
              ->load($metadatadisplayentity_source);
            if ($metadata_display_entitiy) {
              $uuid = $metadata_display_entitiy->uuid();
              $field['settings']['formatter']['metadatadisplayentity_uuid'] = $uuid;
              unset($field['settings']['formatter']['metadatadisplayentity_source']);
              $needs_saving = TRUE;
            }
          }
        }
      }
    }
    if (isset($data['content'])) {
      foreach ($data['content'] as &$realfield) {
        $metadatadisplayentity_id = $realfield['settings']['metadatadisplayentity_id'] ?? NULL;
        $metadatadisplayentity_id = is_scalar($metadatadisplayentity_id) ? $metadatadisplayentity_id : NULL;
        if ($metadatadisplayentity_id) {
          $metadata_display_entitiy = \Drupal::entityTypeManager()
            ->getStorage('metadatadisplay_entity')
            ->load($metadatadisplayentity_id);
          if ($metadata_display_entitiy) {
            $uuid = $metadata_display_entitiy->uuid();
            $realfield['settings']['metadatadisplayentity_uuid'] = $uuid;
            unset($realfield['settings']['metadatadisplayentity_id']);
            $needs_saving = TRUE;
          }
        }
        else {
          $metadatadisplayentity_source = $field['settings']['formatter']['metadatadisplayentity_source'] ?? NULL;
          $metadatadisplayentity_source = is_scalar($metadatadisplayentity_source) ? $metadatadisplayentity_source : NULL;
          if ($metadatadisplayentity_source) {
            $metadata_display_entitiy = \Drupal::entityTypeManager()
              ->getStorage('metadatadisplay_entity')
              ->load($metadatadisplayentity_source);
            if ($metadata_display_entitiy) {
              $uuid = $metadata_display_entitiy->uuid();
              $field['settings']['formatter']['metadatadisplayentity_uuid'] = $uuid;
              unset($field['settings']['formatter']['metadatadisplayentity_source']);
              $needs_saving = TRUE;
            }
          }
        }
      }
    }
    if ($needs_saving) {
      $entity_view->setData($data);
      $entity_view->save(TRUE);
    }
  }
  // Now exposed metadata endpoints.
  $metadataexpose_entities = \Drupal::entityTypeManager()->getStorage('metadataexpose_entity')->loadMultiple();
  foreach ($metadataexpose_entities as $metadataexpose_entity) {
    $metadatadisplayentity_id = $metadataexpose_entity->processor_entity_id ?? NULL;
    if ($metadatadisplayentity_id) {
      $metadatadisplayentity = \Drupal::entityTypeManager()
        ->getStorage('metadatadisplay_entity')
        ->load($metadatadisplayentity_id);
      if ($metadatadisplayentity) {
        $uuid = $metadatadisplayentity->uuid();
        $metadataexpose_entity->setMetadatadisplayentityUuid($uuid);
        $metadataexpose_entity->set('metadatadisplayentity_uuid', $uuid);
        $metadataexpose_entity->set('processor_entity_id', NULL);
        // To be deprecated afterwards.
        $metadataexpose_entity->processor_entity_id = NULL;
        $metadataexpose_entity->save(TRUE);
      }
    }
  }
  $message = "All Metadata Display Entities in Configurations updated to use UUIDs";
  return $message;
}

/**
 * Implements hook_update_dependencies().
 */
function format_strawberryfield_update_dependencies() {
  // The update function that adds the status field must run after
  // content_translation_update_8400() which fixes NULL values for the
  // 'content_translation_status' field.
  if (\Drupal::moduleHandler()->moduleExists('content_translation')) {
    $dependencies['format_strawberryfield'][8703] = [
      'content_translation' => 8703,
    ];

    return $dependencies;
  }
}

/**
 * Add the 'published' and revisionable metadata fields to my_entity.
 */
function format_strawberryfield_update_8703(array &$sandbox) {
  \Drupal::entityTypeManager()->clearCachedDefinitions();
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

  // Add the published entity key and revisionable metadata fields to the
  // my_entity entity type.
  $entity_type = $definition_update_manager->getEntityType('metadatadisplay_entity');
  $entity_type_id = $entity_type->id();

  $entity_keys = $entity_type->getKeys();
  $entity_keys['published'] = 'status';
  $entity_type->set('entity_keys', $entity_keys);

  $revision_metadata_keys = [
    'revision_user' => 'revision_user',
    'revision_created' => 'revision_created',
    'revision_log_message' => 'revision_log_message'
  ];
  $entity_type->set('revision_metadata_keys', $revision_metadata_keys);

  $definition_update_manager->updateEntityType($entity_type);

  $changed = BaseFieldDefinition::create('changed')
    ->setLabel(t('Changed'))
    ->setDescription(t('The time that the Metadata Display was last edited.'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);
  $definition_update_manager->installFieldStorageDefinition('changed', $entity_type_id, $entity_type_id, $changed);

  // Add the status field.
  $status = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Publishing status'))
    ->setDescription(t('A boolean indicating the published state.'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE)
    ->setDefaultValue(TRUE)
    ->setInitialValue(TRUE)
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'settings' => [
        'display_label' => TRUE,
      ],
    ])
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $definition_update_manager->installFieldStorageDefinition('status', $entity_type_id, $entity_type_id, $status);

  $has_content_translation_status_field = \Drupal::moduleHandler()->moduleExists('content_translation') && $definition_update_manager->getFieldStorageDefinition('content_translation_status', $entity_type_id);
  if ($has_content_translation_status_field) {
    $status->setInitialValueFromField('content_translation_status');
  }
  else {
    $status->setInitialValue(TRUE);
  }

  // Add the revision metadata fields.
  $revision_created = BaseFieldDefinition::create('created')
    ->setLabel(t('Revision create time'))
    ->setDescription(t('The time that the current revision was created.'))
    ->setRevisionable(TRUE);
  $definition_update_manager->installFieldStorageDefinition('revision_created', $entity_type_id, $entity_type_id, $revision_created);

  $revision_user = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Revision user'))
    ->setDescription(t('The user ID of the author of the current revision.'))
    ->setSetting('target_type', 'user')
    ->setRevisionable(TRUE);
  $definition_update_manager->installFieldStorageDefinition('revision_user', $entity_type_id, $entity_type_id, $revision_user);

  $revision_log_message = BaseFieldDefinition::create('string_long')
    ->setLabel(t('Revision log message'))
    ->setDescription(t('Briefly describe the changes you have made.'))
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setDisplayOptions('form', [
      'type' => 'string_textarea',
      'weight' => 25,
      'settings' => [
        'rows' => 4,
      ],
    ]);
  $definition_update_manager->installFieldStorageDefinition('revision_log_message', $entity_type_id, $entity_type_id, $revision_log_message);

  // Uninstall the 'content_translation_status' field if needed.
  $database = \Drupal::database();
  if ($has_content_translation_status_field) {
    // First we have to remove the field data.
    $database->update($entity_type->getDataTable())
      ->fields(['content_translation_status' => NULL])
      ->execute();

    // A site may have disabled revisionability for this entity type.
    if ($entity_type->isRevisionable()) {
      $database->update($entity_type->getRevisionDataTable())
        ->fields(['content_translation_status' => NULL])
        ->execute();
    }

    $content_translation_status = $definition_update_manager->getFieldStorageDefinition('content_translation_status', $entity_type_id);
    $definition_update_manager->uninstallFieldStorageDefinition($content_translation_status);
  }

  return t('@entity_type_label has been converted to revisionable and publishable.', ['@entity_type_label' => $entity_type->getLabel()]);
}
